fn main() {
    let mut vals: Vec<usize> = INPUT.split(',').map(|num| num.parse().unwrap()).collect();

    println!("80 days:{}", simulate_growth(&vals, 80));

    println!("256 days:{}", simulate_growth(&vals, 256));
}

fn simulate_growth(fish: &Vec<usize>, days: usize) -> u128 {
    let mut counts = [0u128; 9];
    for n in fish {
        counts[*n] += 1;
    }
    for _ in 0..days {
        let zeros = counts[0];
        for n in 0..8 {
            counts[n] = counts[n + 1];
        }
        counts[8] = zeros;
        counts[6] += zeros;
    }
    counts.iter().sum()
}

const INPUT: &str = "3,5,2,5,4,3,2,2,3,5,2,3,2,2,2,2,3,5,3,5,5,2,2,3,4,2,3,5,5,3,3,5,2,4,5,4,3,5,3,2,5,4,1,1,1,5,1,4,1,4,3,5,2,3,2,2,2,5,2,1,2,2,2,2,3,4,5,2,5,4,1,3,1,5,5,5,3,5,3,1,5,4,2,5,3,3,5,5,5,3,2,2,1,1,3,2,1,2,2,4,3,4,1,3,4,1,2,2,4,1,3,1,4,3,3,1,2,3,1,3,4,1,1,2,5,1,2,1,2,4,1,3,2,1,1,2,4,3,5,1,3,2,1,3,2,3,4,5,5,4,1,3,4,1,2,3,5,2,3,5,2,1,1,5,5,4,4,4,5,3,3,2,5,4,4,1,5,1,5,5,5,2,2,1,2,4,5,1,2,1,4,5,4,2,4,3,2,5,2,2,1,4,3,5,4,2,1,1,5,1,4,5,1,2,5,5,1,4,1,1,4,5,2,5,3,1,4,5,2,1,3,1,3,3,5,5,1,4,1,3,2,2,3,5,4,3,2,5,1,1,1,2,2,5,3,4,2,1,3,2,5,3,2,2,3,5,2,1,4,5,4,4,5,5,3,3,5,4,5,5,4,3,5,3,5,3,1,3,2,2,1,4,4,5,2,2,4,2,1,4";
